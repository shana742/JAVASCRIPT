1) What is JavaScript. How to use it?
->
  - Javascript is a programming language commonly used for web development
    to add interactivity and dynamic content to website.
  - js use it by embedding js code withhin HTML document or in separate files linked to HTML.

2) How many type of Variable in JavaScript? 
->
   - Three types
      A) var
      B) let
      C) const

3) Define a Data Types in js ?
->
   A) Primitive Data Types
      1) string
      2) Number
      3) boolean
      4) undefined
      5) null
      6) bigint
      7) symbol

  B) Non-primitive Data Types ?
      1) object
      2) array
      3) Function

4) Write a mul Function Which will Work Properly When invoked With Following Syntax.
-> 
    Function mul(x) {
        return ffunction(y) {
              return x * y;
        };
      }
    // Example usage:
    const result = mul(2)(3);
    console.log(result);
    //output : 6

 - This function return another function that takes the second argument and 
   perform the multiplication. This way, you can call 'mul(2)' to get a 
   function that multiplies its argument by 2, and then call the result with
   another argument like '(3)' to get the final result.

5) What the deference between undefined and undeclare in JavaScript? 
-> 
   A) Undeclared 
    - A varible is undeclared if it has been used without being formally declared with 'var', 'let',      'const'.
    - trying access as undeclared varible will result in a refrence.

   B) Undefined
    - A varible is undefined if it has been declare but not assinged a value.
    - it can also be the  default  value of a function parametr that was not provided.

6) Using console.log() print out the following statement: The quote 'There is no exercise 
   better for the heart than reaching down and lifting people up.' by John Holmes teaches us to 
   help one another. Using console.log() print out the following quote by Mother Teresa:

-> 
  - Console.log(" The quote 'There is no exercise better for the heart than reaching down
    and lifting people up.' by John Holmes teaches us to help one another"
  - console.log("Not all of us can do great things. but we can do small things with great love."-         Mother teresa); 
  - This code will output the provided quotes to the console. the first 'console.log()' statement uses     single quote within the double quotes and the second one uses a template literl for the mother     terses quote

7)  Check if typeof '10' is exactly equal to 10. If not make it exactly equal?
->
    - The 'typeof' operator in javascript return a string indicating the type of the operand. in this       case, 'typeof' '10' would be equal to 'string', not anumber. if you want to check if the string       can be converted to a number and then compare it to '10' you can use 'parseInt()' or 'numbe()'.
    
    - const stringnumber = '10';
      if (typeof stringnumber === 'string && parseInt(stringNumber) == 10) {
          console.log('equal!');
      } else {
       // if not equal, you can convert it to a number
      const convertedNumber = parseInt(stringNumber);
      console.log('converted to number: ${convertedNumber}');
     }

8) Write a JavaScript Program to find the area of a triangle? 
->
   -  Function findTriangleArea(base, height) {
        if (typeof base === 'number' && typeof height === 'number' && base > 0 && height 0) {
        const area = (base * height) / 2;
        retuen area;
        } else {
          return "Invalid input . please provide positive numbers for base and height.";
        }
       }

      // Example usage:
       const baseLength = 5;
       const triangleHeight = 8;
       const result = findTriangleArea(baseLength, triangleheight);
       console,log('the area of the triangle with base ${baseLength} and height ${triangleheight}is:        ${result}');



10) What is Condition Statement? 
-> 
  - A condition statement also know as a conditional or a decision- making statement, is a programming     construct that allows you to execute different code blocks based on whether a specified condition     evalutes to true or false.
  - The common condition statement.
     1) if statement
     2) if-else statement
     3) if-else if-else statement






15) What is the result of the expression (5 > 3 && 2 < 4)? 
-> 
    JavaScript, the expression (5 > 3 && 2 < 4) is evaluated using logical operators. The && (logical    AND) operator returns true if both of its operands are true, and false otherwise.

   Let's break down the expression:

   5 > 3 is true because 5 is greater than 3.
   2 < 4 is also true because 2 is less than 4.
   Therefore, the overall expression is true && true, which evaluates to true.

   So, the result of the expression (5 > 3 && 2 < 4) in JavaScript is true.

16)  What is the result of the expression (true && 1 && "hello")? 
->
  JavaScript, the && (logical AND) operator returns the first falsy operand if any, and the last   operand if all operands are truthy. If the last operand is truthy and there are no falsy operands,   the result is the last truthy operand.

  Let's break down the expression (true && 1 && "hello"):

  true is truthy.
  1 is also truthy.
  "hello" is truthy.
   Since all operands are truthy, the && operator returns the last truthy operand. Therefore, the    result of the expression is the string "hello".
 

17) What is the result of the expression true && false || false && true?
->
  JavaScript, the && (logical AND) operator has higher precedence than the || (logical OR) operator.   The expression is evaluated from left to right.

  Let's break down the expression true && false || false && true:

  1) true && false is false because the logical AND operator (&&) returns false if any of its operands      is   false.
  2) false || false is false because the logical OR operator (||) returns true if at least one of its     operands is true.
   
   Therefore, the result of the entire expression is false. The expression is equivalent to (true &&     false) || (false && true), and the logical AND operation between true and false results in false

18) What is a Loop and Switch Case in JavaScript define that ?
->
  Loops:
     A loop is a programming construct that allows you to repeat a block of code multiple times.      JavaScript supports several types of loops, but two of the most common ones are:

     1) For Loop:

     for (let i = 0; i < 5; i++) {
     console.log(i);
  }
  In this example, the for loop initializes a variable i to 0, checks whether i is less than 5,   executes the loop body (printing the value of i), increments i, and repeats the process until the   condition i < 5 is false.

   2) While Loop:

    let i = 0;
    while (i < 5) {
    console.log(i);
    i++;
    }
   The while loop continues executing its body as long as the specified condition (i < 5) is true.

   Switch Case:
   A switch statement is used to perform different actions based on different conditions. It provides    a concise way to handle multiple possible conditions.

  
   let day = "Monday";

   switch (day) {
     case "Monday":
        console.log("It's the start of the week.");
        break;
    case "Tuesday":
    case "Wednesday":
        console.log("It's the middle of the week.");
        break;
    case "Thursday":
    case "Friday":
        console.log("It's almost the weekend.");
        break;
    case "Saturday":
    case "Sunday":
        console.log("It's the weekend!");
        break;
    default:
        console.log("Invalid day.");
}
   
19) What is the use of is Nan function? 
-> 
   - isNaN function used to check if a value is NAN(Not a Number).
   - isNaN() Convert the value to a number before testing it. 

20) What is the difference between && and || in JavaScript? 
-> 
   JavaScript, && and || are both logical operators used for combining and evaluating boolean    expressions. They operate on boolean values and return a boolean result. Here's the difference    between them:

  1) Logical AND (&&):

    - The && operator returns true if both of its operands are true.
      If the first operand is false, the second operand is not evaluated, as the overall result will       be false regardless of the second operand's value.
    
     Example:
             let result = (true && false);  // Result is false
     
  2) Logical OR (||):

   - The || operator returns true if at least one of its operands is true.
     If the first operand is true, the second operand is not evaluated, as the overall result will be      true regardless of the second operand's value.
     Example:
           let result = (true || false);  // Result is true
     
     - Here's a quick summary
        && (Logical AND) returns true only if both operands are true.
        || (Logical OR) returns true if at least one operand is true.

21)  What is the use of Void (0)? 
-> 
   - void(0) is often used to generate an undefined value. the 'void' operate
    in javascript takes an expression as an operand and returns 'undefined'.
    it is typically used with the value '0' as the operand, resulting in undefibed.

    Ex:-
       let result = void(0);
       console.log(result);






   ------------------------------(Conditional looping logic Question)---------------------------------



30)  What are the looping structures in JavaScript? Any one Example?
->
   1) for Loop:
     The for loop is used when you know in advance how many times the loop should run. It consists of       three parts: initialization, condition, and update.

     for (let i = 0; i < 5; i++) {
     console.log(i);
   }
     In this example, the loop initializes a variable i to 0, runs as long as i is less than 5, and         increments i in each iteration.

   2) while Loop:
     The while loop continues to execute as long as a specified condition is true.

    let i = 0;
    while (i < 5) {
    console.log(i);
    i++;
   } 
   This example demonstrates a while loop that prints values of i as long as i is less than 5.

   3) do...while Loop:
   The do...while loop is similar to the while loop but guarantees that the code block is executed at    least once before checking the condition.

   let i = 0;
   do {
    console.log(i);
    i++;
   } while (i < 5);
   This example prints values of i and increments i as long as i is less than 5.

   4) for...in Loop:
   The for...in loop is used to iterate over the properties of an object.

   const person = { name: 'John', age: 30, city: 'New York' };
   for (let key in person) {
    console.log(`${key}: ${person[key]}`);
   }
   This example iterates over the properties of the person object and prints each key-value pair.

  5) for...of Loop:
   The for...of loop is used to iterate over the values of an iterable object (like arrays).


   const numbers = [1, 2, 3, 4, 5];
   for (let number of numbers) {
    console.log(number);
   }






















--------------------------------------(Array and object Question)-------------------------------------






 
  





47)  What is the drawback of declaring methods directly in JavaScript objects?
->
   When declaring methods directly in JavaScript objects, there are a few drawbacks to consider:

    1) Code Duplication:
        
       - If you have multiple instances of an object, each instance will have its own copy of the          methods. This can lead to code duplication, especially if the methods are long or complex. If          the methods are the same for each instance, it may be more efficient to use prototype methods          or class methods.
   
    2) Memory Usage:

       - Each instance of an object carries its own copy of the methods, potentially leading to          increased memory usage. If the methods are the same for multiple instances, it's more          memory-efficient to use shared methods through prototypes or classes.

    3) Immutability:
       
       - When methods are declared directly in an object, they become part of the object and cannot be          easily modified or extended. This can limit flexibility and make it harder to update or          enhance the methods dynamically.
     
    4) Inheritance:
   
       - If you want to create an inheritance hierarchy or share methods among related objects, using         prototype-based inheritance or classes provides a more structured and maintainable approach. 



49) Change all the string characters to capital letters using toUpperCase() method? 
->
   // Your string
      const originalString = "Change me to uppercase!";
 
   // Convert all characters to uppercase
      const uppercaseString = originalString.toUpperCase();

   // Print the result to the console
      console.log(uppercaseString);






53) Form Validtion in JS?
->
   if a form field is empty this function alerts a message and returns false, to prevent the form    being submmited.




56)  how many type of JS Event? How to use it?
->
   1) Mouse Events:

      - click: Occurs when the user clicks an element.
      - dblclick: Occurs when the user double-clicks an element.
      - mousedown: Occurs when the user presses a mouse button over an element.
      - mouseup: Occurs when the user releases a mouse button over an element.
      - mousemove: Occurs when the mouse pointer moves over an element.

    2) Keyboard Events:

      - keydown: Occurs when a keyboard key is pressed down.
      - keyup: Occurs when a keyboard key is released.
      - keypress: Occurs when a key that produces a character value is pressed.

    3) Form Events:

      - submit: Occurs when a form is submitted.
      - reset: Occurs when a form is reset.
      - change: Occurs when the value of an input element changes (for text fields, checkboxes, etc.).
      - focus: Occurs when an element receives focus.
      - blur: Occurs when an element loses focus.

    4) Document/Window Events:

     - load: Occurs when a resource and its dependent resources have finished loading.
     - unload: Occurs when the document is being unloaded (e.g., when navigating away from a page).
     - resize: Occurs when the browser window is resized.
     - scroll: Occurs when the user scrolls in an element.

    5) Event Delegation:

    - Events like click, mouseover, etc., can also be handled through event delegation where a common       ancestor is used to listen for events on behalf of its descendants.

59) What is Bom vs Dom in JS?
-> 
    1) DOM (Document Object Model):
   
      Definition:

        - The DOM is a programming interface for web documents.
        - It represents the structure of a document as a tree of objects, where each object           corresponds to a part of the document, such as elements, attributes, text, etc.

      Purpose:

        - The primary purpose of the DOM is to provide a structured representation of a document,           allowing programs to dynamically access and manipulate the content, structure, and style of           a document.

      Usage:

       - Developers use the DOM to interact with HTML or XML documents using scripting languages like          JavaScript. It allows them to change content, modify styles, handle events, and create                 dynamic web applications.
   
      Examples:

        - Accessing and modifying HTML elements: document.getElementById('myElement').innerHTML = 'New           content';
        - Adding event listeners: document.getElementById('myButton').addEventListener('click',           function() { /* Handle click event */ });


    2) BOM (Browser Object Model):

      Definition:

       - The BOM is a set of APIs provided by the web browser to interact with the browser itself,          rather than the content of a web page.
         It includes objects such as window, navigator, location, screen, history, etc.

      Purpose:

      - The BOM provides functionality related to the browser environment and client machine. It         allows control over the browser, navigation, and provides information about the client         machine.
   
      Usage:

     - Developers use the BOM for tasks like managing browser windows, controlling navigation,        obtaining information about the user's device, handling cookies, and more.

      Examples:

    - Opening a new browser window: window.open('https://example.com', '_blank');
      Redirecting to a new URL: window.location.href = 'https://newurl.com';
      Accessing information about the user's screen: screen.width, screen.height


60) Array vs object defences in JS?
->
    1) Arrays:
   
     A) Ordered Collection:

        - Arrays are ordered collections of values, and each value is associated with an index                  (position) in the array.
        - Access to elements is based on numerical indices.
   
     B) Use Cases:

       - Arrays are suitable for storing and accessing a list of similar or related items, such as a          list of numbers, strings, or objects.
 
     C) Declaration:

         const myArray = [1, 2, 3, 4, 5];
     
     D) Key Characteristics:

        -  Indexed access: myArray[0]
        -  Length property: myArray.length
        -  Iteration using loops: for (let i = 0; i < myArray.length; i++)


     2) Objects:

        A) Key-Value Pairs:

           - Objects are collections of key-value pairs, where each key is a string or symbol, and the              associated value can be of any data type.
             Access to values is based on keys.

        B) Use Cases:

           - Objects are suitable for representing entities with properties and behaviors, such as              representing a person with name, age, and address.

        c) Declaration:

             const myObject = { key1: 'value1', key2: 'value2', key3: 'value3' };
           
        D)  Key Characteristics:

            - Access using keys: myObject.key1 or myObject['key1']
            - Dynamic property addition/removal: myObject.newKey = 'newValue'; delete myObject.key2;
            - Iteration using for...in loop: for (let key in myObject)
           
   3) Use Cases Comparison:

      Arrays:

          - Use when dealing with an ordered list of similar items.
          - When the order of elements is important, and you need to perform operations like sorting,             filtering, or mapping.

     Objects:

         - Use when dealing with entities that have properties and behaviors.
         - When you need to organize data in key-value pairs and associate values with descriptive            keys.

    Defenses:
    Array Defenses:

      - Use array methods (map, filter, reduce, etc.) for operations on arrays to avoid manual         iteration.
      - Validate array indices before accessing them to prevent potential errors.
       Object Defenses:

        Check if a key exists before accessing its value to avoid undefined errors.
        Ensure that keys are unique and do not conflict to prevent unexpected behavior.









65)  copy to one string to another string in JS? 
-> 
     1) Using Assignment:

       // Original string
         const originalString = 'Hello, World!';

      // Copy the string using assignment
         const copiedString = originalString;

      // Output the result
         console.log(copiedString);
         Using the slice() Method:

     2) Using the slice() Method:

         // Original string
           const originalString = 'Hello, World!';

        // Copy the string using slice()
          const copiedString = originalString.slice();

       // Output the result
            console.log(copiedString);
 
     3) Using Concatenation:

       // Original string
          const originalString = 'Hello, World!';

         // Copy the string using concatenation
          const copiedString = '' + originalString; 

        // Output the result
          console.log(copiedString);

66) Find the length of a string without using libraryFunction?
->
     // Original string
const myString = 'Hello, World!';

// Initialize a counter for the length
let length = 0;

// Iterate through each character of the string
for (let char of myString) {
  // Increment the length counter
  length++;
}

// Output the result
console.log('Length of the string:', length);











 





